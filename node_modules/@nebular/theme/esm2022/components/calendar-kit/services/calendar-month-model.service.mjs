/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import { Injectable } from '@angular/core';
import { batch, range } from '../helpers';
import * as i0 from "@angular/core";
import * as i1 from "./date.service";
export class NbCalendarMonthModelService {
    constructor(dateService) {
        this.dateService = dateService;
    }
    createDaysGrid(activeMonth, boundingMonth = true, firstDayOfWeek) {
        const weeks = this.createDates(activeMonth, firstDayOfWeek);
        return this.withBoundingMonths(weeks, activeMonth, boundingMonth);
    }
    createDates(activeMonth, firstDayOfWeek) {
        const days = this.createDateRangeForMonth(activeMonth);
        const startOfWeekDayDiff = this.getStartOfWeekDayDiff(activeMonth, firstDayOfWeek);
        return batch(days, this.dateService.DAYS_IN_WEEK, startOfWeekDayDiff);
    }
    withBoundingMonths(weeks, activeMonth, boundingMonth) {
        let withBoundingMonths = weeks;
        if (this.isShouldAddPrevBoundingMonth(withBoundingMonths)) {
            withBoundingMonths = this.addPrevBoundingMonth(withBoundingMonths, activeMonth, boundingMonth);
        }
        if (this.isShouldAddNextBoundingMonth(withBoundingMonths)) {
            withBoundingMonths = this.addNextBoundingMonth(withBoundingMonths, activeMonth, boundingMonth);
        }
        return withBoundingMonths;
    }
    addPrevBoundingMonth(weeks, activeMonth, boundingMonth) {
        const firstWeek = weeks.shift();
        const requiredItems = this.dateService.DAYS_IN_WEEK - firstWeek.length;
        firstWeek.unshift(...this.createPrevBoundingDays(activeMonth, boundingMonth, requiredItems));
        return [firstWeek, ...weeks];
    }
    addNextBoundingMonth(weeks, activeMonth, boundingMonth) {
        const lastWeek = weeks.pop();
        const requiredItems = this.dateService.DAYS_IN_WEEK - lastWeek.length;
        lastWeek.push(...this.createNextBoundingDays(activeMonth, boundingMonth, requiredItems));
        return [...weeks, lastWeek];
    }
    createPrevBoundingDays(activeMonth, boundingMonth, requiredItems) {
        const month = this.dateService.addMonth(activeMonth, -1);
        const daysInMonth = this.dateService.getNumberOfDaysInMonth(month);
        return this.createDateRangeForMonth(month)
            .slice(daysInMonth - requiredItems)
            .map(date => boundingMonth ? date : null);
    }
    createNextBoundingDays(activeMonth, boundingMonth, requiredItems) {
        const month = this.dateService.addMonth(activeMonth, 1);
        return this.createDateRangeForMonth(month)
            .slice(0, requiredItems)
            .map(date => boundingMonth ? date : null);
    }
    getStartOfWeekDayDiff(date, firstDayOfWeek) {
        const startOfMonth = this.dateService.getMonthStart(date);
        return this.getWeekStartDiff(startOfMonth, firstDayOfWeek);
    }
    getWeekStartDiff(date, firstDayOfWeek) {
        const weekOfset = firstDayOfWeek ?? this.dateService.getFirstDayOfWeek();
        return (7 - weekOfset + this.dateService.getDayOfWeek(date)) % 7;
    }
    isShouldAddPrevBoundingMonth(weeks) {
        return weeks[0].length < this.dateService.DAYS_IN_WEEK;
    }
    isShouldAddNextBoundingMonth(weeks) {
        return weeks[weeks.length - 1].length < this.dateService.DAYS_IN_WEEK;
    }
    createDateRangeForMonth(date) {
        const daysInMonth = this.dateService.getNumberOfDaysInMonth(date);
        return range(daysInMonth, i => {
            const year = this.dateService.getYear(date);
            const month = this.dateService.getMonth(date);
            return this.dateService.createDate(year, month, i + 1);
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NbCalendarMonthModelService, deps: [{ token: i1.NbDateService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NbCalendarMonthModelService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NbCalendarMonthModelService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.NbDateService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXItbW9udGgtbW9kZWwuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9mcmFtZXdvcmsvdGhlbWUvY29tcG9uZW50cy9jYWxlbmRhci1raXQvc2VydmljZXMvY2FsZW5kYXItbW9udGgtbW9kZWwuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OztHQUlHO0FBRUgsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUczQyxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNLFlBQVksQ0FBQzs7O0FBSTFDLE1BQU0sT0FBTywyQkFBMkI7SUFFdEMsWUFBc0IsV0FBNkI7UUFBN0IsZ0JBQVcsR0FBWCxXQUFXLENBQWtCO0lBQ25ELENBQUM7SUFFRCxjQUFjLENBQUMsV0FBYyxFQUFFLGdCQUF5QixJQUFJLEVBQUUsY0FBdUI7UUFDbkYsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLEVBQUUsY0FBYyxDQUFDLENBQUM7UUFDNUQsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsS0FBSyxFQUFFLFdBQVcsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUNwRSxDQUFDO0lBRU8sV0FBVyxDQUFDLFdBQWMsRUFBRSxjQUF1QjtRQUN6RCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsdUJBQXVCLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDdkQsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLENBQUMscUJBQXFCLENBQUMsV0FBVyxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBQ25GLE9BQU8sS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO0lBQ3hFLENBQUM7SUFFTyxrQkFBa0IsQ0FBQyxLQUFZLEVBQUUsV0FBYyxFQUFFLGFBQXNCO1FBQzdFLElBQUksa0JBQWtCLEdBQUcsS0FBSyxDQUFDO1FBRS9CLElBQUksSUFBSSxDQUFDLDRCQUE0QixDQUFDLGtCQUFrQixDQUFDLEVBQUU7WUFDekQsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLGtCQUFrQixFQUFFLFdBQVcsRUFBRSxhQUFhLENBQUMsQ0FBQztTQUNoRztRQUVELElBQUksSUFBSSxDQUFDLDRCQUE0QixDQUFDLGtCQUFrQixDQUFDLEVBQUU7WUFDekQsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLGtCQUFrQixFQUFFLFdBQVcsRUFBRSxhQUFhLENBQUMsQ0FBQztTQUNoRztRQUVELE9BQU8sa0JBQWtCLENBQUM7SUFDNUIsQ0FBQztJQUVPLG9CQUFvQixDQUFDLEtBQVksRUFBRSxXQUFjLEVBQUUsYUFBc0I7UUFDL0UsTUFBTSxTQUFTLEdBQUcsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2hDLE1BQU0sYUFBYSxHQUFXLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUM7UUFDL0UsU0FBUyxDQUFDLE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxXQUFXLEVBQUUsYUFBYSxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUM7UUFDN0YsT0FBTyxDQUFDLFNBQVMsRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFTyxvQkFBb0IsQ0FBQyxLQUFZLEVBQUUsV0FBYyxFQUFFLGFBQXNCO1FBQy9FLE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUM3QixNQUFNLGFBQWEsR0FBVyxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDO1FBQzlFLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsc0JBQXNCLENBQUMsV0FBVyxFQUFFLGFBQWEsRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUFDO1FBQ3pGLE9BQU8sQ0FBQyxHQUFHLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBRU8sc0JBQXNCLENBQUMsV0FBYyxFQUFFLGFBQXNCLEVBQUUsYUFBcUI7UUFDMUYsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDekQsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxzQkFBc0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNuRSxPQUFPLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxLQUFLLENBQUM7YUFDdkMsS0FBSyxDQUFDLFdBQVcsR0FBRyxhQUFhLENBQUM7YUFDbEMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFTyxzQkFBc0IsQ0FBQyxXQUFjLEVBQUUsYUFBc0IsRUFBRSxhQUFxQjtRQUMxRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDeEQsT0FBTyxJQUFJLENBQUMsdUJBQXVCLENBQUMsS0FBSyxDQUFDO2FBQ3ZDLEtBQUssQ0FBQyxDQUFDLEVBQUUsYUFBYSxDQUFDO2FBQ3ZCLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRU8scUJBQXFCLENBQUMsSUFBTyxFQUFFLGNBQXVCO1FBQzVELE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzFELE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLFlBQVksRUFBRSxjQUFjLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBRU8sZ0JBQWdCLENBQUMsSUFBTyxFQUFFLGNBQXVCO1FBQ3ZELE1BQU0sU0FBUyxHQUFHLGNBQWMsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDekUsT0FBTyxDQUFDLENBQUMsR0FBRyxTQUFTLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbkUsQ0FBQztJQUVPLDRCQUE0QixDQUFDLEtBQVk7UUFDL0MsT0FBTyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDO0lBQ3pELENBQUM7SUFFTyw0QkFBNEIsQ0FBQyxLQUFZO1FBQy9DLE9BQU8sS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDO0lBQ3hFLENBQUM7SUFFTyx1QkFBdUIsQ0FBQyxJQUFPO1FBQ3JDLE1BQU0sV0FBVyxHQUFXLElBQUksQ0FBQyxXQUFXLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDMUUsT0FBTyxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxFQUFFO1lBQzVCLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzVDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzlDLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7UUFDeEQsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOytHQXBGVSwyQkFBMkI7bUhBQTNCLDJCQUEyQjs7NEZBQTNCLDJCQUEyQjtrQkFEdkMsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBBa3Zlby4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi9cblxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBOYkRhdGVTZXJ2aWNlIH0gZnJvbSAnLi9kYXRlLnNlcnZpY2UnO1xuaW1wb3J0IHsgYmF0Y2gsIHJhbmdlIH0gZnJvbSAnLi4vaGVscGVycyc7XG5cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE5iQ2FsZW5kYXJNb250aE1vZGVsU2VydmljZTxEPiB7XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGRhdGVTZXJ2aWNlOiBOYkRhdGVTZXJ2aWNlPEQ+KSB7XG4gIH1cblxuICBjcmVhdGVEYXlzR3JpZChhY3RpdmVNb250aDogRCwgYm91bmRpbmdNb250aDogYm9vbGVhbiA9IHRydWUsIGZpcnN0RGF5T2ZXZWVrPzogbnVtYmVyKTogRFtdW10ge1xuICAgIGNvbnN0IHdlZWtzID0gdGhpcy5jcmVhdGVEYXRlcyhhY3RpdmVNb250aCwgZmlyc3REYXlPZldlZWspO1xuICAgIHJldHVybiB0aGlzLndpdGhCb3VuZGluZ01vbnRocyh3ZWVrcywgYWN0aXZlTW9udGgsIGJvdW5kaW5nTW9udGgpO1xuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGVEYXRlcyhhY3RpdmVNb250aDogRCwgZmlyc3REYXlPZldlZWs/OiBudW1iZXIpOiBEW11bXSB7XG4gICAgY29uc3QgZGF5cyA9IHRoaXMuY3JlYXRlRGF0ZVJhbmdlRm9yTW9udGgoYWN0aXZlTW9udGgpO1xuICAgIGNvbnN0IHN0YXJ0T2ZXZWVrRGF5RGlmZiA9IHRoaXMuZ2V0U3RhcnRPZldlZWtEYXlEaWZmKGFjdGl2ZU1vbnRoLCBmaXJzdERheU9mV2Vlayk7XG4gICAgcmV0dXJuIGJhdGNoKGRheXMsIHRoaXMuZGF0ZVNlcnZpY2UuREFZU19JTl9XRUVLLCBzdGFydE9mV2Vla0RheURpZmYpO1xuICB9XG5cbiAgcHJpdmF0ZSB3aXRoQm91bmRpbmdNb250aHMod2Vla3M6IERbXVtdLCBhY3RpdmVNb250aDogRCwgYm91bmRpbmdNb250aDogYm9vbGVhbik6IERbXVtdIHtcbiAgICBsZXQgd2l0aEJvdW5kaW5nTW9udGhzID0gd2Vla3M7XG5cbiAgICBpZiAodGhpcy5pc1Nob3VsZEFkZFByZXZCb3VuZGluZ01vbnRoKHdpdGhCb3VuZGluZ01vbnRocykpIHtcbiAgICAgIHdpdGhCb3VuZGluZ01vbnRocyA9IHRoaXMuYWRkUHJldkJvdW5kaW5nTW9udGgod2l0aEJvdW5kaW5nTW9udGhzLCBhY3RpdmVNb250aCwgYm91bmRpbmdNb250aCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaXNTaG91bGRBZGROZXh0Qm91bmRpbmdNb250aCh3aXRoQm91bmRpbmdNb250aHMpKSB7XG4gICAgICB3aXRoQm91bmRpbmdNb250aHMgPSB0aGlzLmFkZE5leHRCb3VuZGluZ01vbnRoKHdpdGhCb3VuZGluZ01vbnRocywgYWN0aXZlTW9udGgsIGJvdW5kaW5nTW9udGgpO1xuICAgIH1cblxuICAgIHJldHVybiB3aXRoQm91bmRpbmdNb250aHM7XG4gIH1cblxuICBwcml2YXRlIGFkZFByZXZCb3VuZGluZ01vbnRoKHdlZWtzOiBEW11bXSwgYWN0aXZlTW9udGg6IEQsIGJvdW5kaW5nTW9udGg6IGJvb2xlYW4pOiBEW11bXSB7XG4gICAgY29uc3QgZmlyc3RXZWVrID0gd2Vla3Muc2hpZnQoKTtcbiAgICBjb25zdCByZXF1aXJlZEl0ZW1zOiBudW1iZXIgPSB0aGlzLmRhdGVTZXJ2aWNlLkRBWVNfSU5fV0VFSyAtIGZpcnN0V2Vlay5sZW5ndGg7XG4gICAgZmlyc3RXZWVrLnVuc2hpZnQoLi4udGhpcy5jcmVhdGVQcmV2Qm91bmRpbmdEYXlzKGFjdGl2ZU1vbnRoLCBib3VuZGluZ01vbnRoLCByZXF1aXJlZEl0ZW1zKSk7XG4gICAgcmV0dXJuIFtmaXJzdFdlZWssIC4uLndlZWtzXTtcbiAgfVxuXG4gIHByaXZhdGUgYWRkTmV4dEJvdW5kaW5nTW9udGgod2Vla3M6IERbXVtdLCBhY3RpdmVNb250aDogRCwgYm91bmRpbmdNb250aDogYm9vbGVhbik6IERbXVtdIHtcbiAgICBjb25zdCBsYXN0V2VlayA9IHdlZWtzLnBvcCgpO1xuICAgIGNvbnN0IHJlcXVpcmVkSXRlbXM6IG51bWJlciA9IHRoaXMuZGF0ZVNlcnZpY2UuREFZU19JTl9XRUVLIC0gbGFzdFdlZWsubGVuZ3RoO1xuICAgIGxhc3RXZWVrLnB1c2goLi4udGhpcy5jcmVhdGVOZXh0Qm91bmRpbmdEYXlzKGFjdGl2ZU1vbnRoLCBib3VuZGluZ01vbnRoLCByZXF1aXJlZEl0ZW1zKSk7XG4gICAgcmV0dXJuIFsuLi53ZWVrcywgbGFzdFdlZWtdO1xuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGVQcmV2Qm91bmRpbmdEYXlzKGFjdGl2ZU1vbnRoOiBELCBib3VuZGluZ01vbnRoOiBib29sZWFuLCByZXF1aXJlZEl0ZW1zOiBudW1iZXIpOiBEW10ge1xuICAgIGNvbnN0IG1vbnRoID0gdGhpcy5kYXRlU2VydmljZS5hZGRNb250aChhY3RpdmVNb250aCwgLTEpO1xuICAgIGNvbnN0IGRheXNJbk1vbnRoID0gdGhpcy5kYXRlU2VydmljZS5nZXROdW1iZXJPZkRheXNJbk1vbnRoKG1vbnRoKTtcbiAgICByZXR1cm4gdGhpcy5jcmVhdGVEYXRlUmFuZ2VGb3JNb250aChtb250aClcbiAgICAgIC5zbGljZShkYXlzSW5Nb250aCAtIHJlcXVpcmVkSXRlbXMpXG4gICAgICAubWFwKGRhdGUgPT4gYm91bmRpbmdNb250aCA/IGRhdGUgOiBudWxsKTtcbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlTmV4dEJvdW5kaW5nRGF5cyhhY3RpdmVNb250aDogRCwgYm91bmRpbmdNb250aDogYm9vbGVhbiwgcmVxdWlyZWRJdGVtczogbnVtYmVyKTogRFtdIHtcbiAgICBjb25zdCBtb250aCA9IHRoaXMuZGF0ZVNlcnZpY2UuYWRkTW9udGgoYWN0aXZlTW9udGgsIDEpO1xuICAgIHJldHVybiB0aGlzLmNyZWF0ZURhdGVSYW5nZUZvck1vbnRoKG1vbnRoKVxuICAgICAgLnNsaWNlKDAsIHJlcXVpcmVkSXRlbXMpXG4gICAgICAubWFwKGRhdGUgPT4gYm91bmRpbmdNb250aCA/IGRhdGUgOiBudWxsKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0U3RhcnRPZldlZWtEYXlEaWZmKGRhdGU6IEQsIGZpcnN0RGF5T2ZXZWVrPzogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBjb25zdCBzdGFydE9mTW9udGggPSB0aGlzLmRhdGVTZXJ2aWNlLmdldE1vbnRoU3RhcnQoZGF0ZSk7XG4gICAgcmV0dXJuIHRoaXMuZ2V0V2Vla1N0YXJ0RGlmZihzdGFydE9mTW9udGgsIGZpcnN0RGF5T2ZXZWVrKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0V2Vla1N0YXJ0RGlmZihkYXRlOiBELCBmaXJzdERheU9mV2Vlaz86IG51bWJlcik6IG51bWJlciB7XG4gICAgY29uc3Qgd2Vla09mc2V0ID0gZmlyc3REYXlPZldlZWsgPz8gdGhpcy5kYXRlU2VydmljZS5nZXRGaXJzdERheU9mV2VlaygpO1xuICAgIHJldHVybiAoNyAtIHdlZWtPZnNldCArIHRoaXMuZGF0ZVNlcnZpY2UuZ2V0RGF5T2ZXZWVrKGRhdGUpKSAlIDc7XG4gIH1cblxuICBwcml2YXRlIGlzU2hvdWxkQWRkUHJldkJvdW5kaW5nTW9udGgod2Vla3M6IERbXVtdKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHdlZWtzWzBdLmxlbmd0aCA8IHRoaXMuZGF0ZVNlcnZpY2UuREFZU19JTl9XRUVLO1xuICB9XG5cbiAgcHJpdmF0ZSBpc1Nob3VsZEFkZE5leHRCb3VuZGluZ01vbnRoKHdlZWtzOiBEW11bXSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB3ZWVrc1t3ZWVrcy5sZW5ndGggLSAxXS5sZW5ndGggPCB0aGlzLmRhdGVTZXJ2aWNlLkRBWVNfSU5fV0VFSztcbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlRGF0ZVJhbmdlRm9yTW9udGgoZGF0ZTogRCk6IERbXSB7XG4gICAgY29uc3QgZGF5c0luTW9udGg6IG51bWJlciA9IHRoaXMuZGF0ZVNlcnZpY2UuZ2V0TnVtYmVyT2ZEYXlzSW5Nb250aChkYXRlKTtcbiAgICByZXR1cm4gcmFuZ2UoZGF5c0luTW9udGgsIGkgPT4ge1xuICAgICAgY29uc3QgeWVhciA9IHRoaXMuZGF0ZVNlcnZpY2UuZ2V0WWVhcihkYXRlKTtcbiAgICAgIGNvbnN0IG1vbnRoID0gdGhpcy5kYXRlU2VydmljZS5nZXRNb250aChkYXRlKTtcbiAgICAgIHJldHVybiB0aGlzLmRhdGVTZXJ2aWNlLmNyZWF0ZURhdGUoeWVhciwgbW9udGgsIGkgKyAxKVxuICAgIH0pO1xuICB9XG59XG4iXX0=